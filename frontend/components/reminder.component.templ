package frontend

import "pkg/types"
import "time"
import helperFuncs "pkg/helper"

templ ReminderAndAlertPage(task string, tasks []types.Task, allApps []types.AppIconCategoryAndCmdLine) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="stylesheet" href="/assets/styles/index.css"/>
			<link rel="stylesheet" href="/assets/styles/reminder.css"/>
			<link rel="stylesheet" href="/assets/styles/dd.min.css"/>
			<script src="assets/javascript/script.out.js"></script>
			<script src="assets/libraries/htmx.min.js"></script>
			<script src="assets/libraries/dd.min.js"></script>
			<title>ScreenTimePage</title>
		</head>
		<body>
			<div class="page">
				@menu()
				@reminderAndAlert(task, tasks, allApps)
			</div>
		</body>
	</html>
}

templ reminderAndAlert(task string, tasks []types.Task, allApps []types.AppIconCategoryAndCmdLine) {
	<div class="main">
		@Header()
		<div class="reminder-page">
			<div class="sticky-header">
				<div class="reminder" style="cursor:pointer;">
					<a href="/task?which=reminder">
						<h2>Reminder and Alert</h2>
					</a>
					<button class="reminder-dialog__btn"><img src="assets/svg/add.svg" alt=""/></button>
				</div>
				<div class="limit" style="cursor:pointer;">
					<a href="/task?which=limit">
						<h2>Limit</h2>
					</a>
					<button class="limit-dialog__btn"><img src="assets/svg/add.svg" alt=""/></button>
				</div>
			</div>
			if len(tasks) == 0 {
				<div class="cards-holder" style="min-height: calc(100vh - 8rem); display: flex; justify-content: center; align-items: center; color:white">No reminder</div>
			}
			if task == "reminder" {
				@reminderList(tasks)
			} else {
				@limitList(tasks)
			}
		</div>
	</div>
	@reminderDialog()
	@limitDialog(allApps)
}

templ reminderList(task []types.Task) {
	<div class="cards-holder">
		<ul>
			for _, t := range task {
				<li>
					<div class="card">
						<div class="info">
							<p class="title"><span class="label"><i>title:</i></span> <span class="content">{ t.UI.Title }</span></p>
							<p class="subtitle"><span class="label"><i>subtitle:</i></span> <span class="content">{ t.UI.Subtitle }</span></p>
							<details>
								<summary><span class="label"><i>See attached note</i></span></summary>
								<p>{ t.UI.Notes }</p>
							</details>
							<div class="action">would launch: <img src={ getImageFilePath(t.AppName, t.Icon) } alt=""/> { t.AppName }</div>
						</div>
						<div class="spacing">
							<button class="edit-button">Edit</button>
						</div>
						<div class="alert">
							<p class="start"><span class="label"><i>Starts at:</i></span> <span class="content">{ formatTimeToHumanReadable(t.TaskTime.StartTime) }</span></p>
							if time.Now().Before(t.TaskTime.StartTime.Add(intToDuration(-t.TaskTime.AlertTimesInMinutes[0]))) {
								<p class="remind">
									<span class="label"><i>reminder at:</i></span>
									<span class="content">{ formatTimeToHumanReadable(t.TaskTime.StartTime.Add(intToDuration(-t.TaskTime.AlertTimesInMinutes[0]))) }</span>
								</p>
							}
							if time.Now().Before(t.TaskTime.StartTime.Add(intToDuration(-t.TaskTime.AlertTimesInMinutes[1]))) {
								<p class="remind">
									<span class="label"><i>reminder at:</i></span>
									<span class="content">{ formatTimeToHumanReadable(t.TaskTime.StartTime.Add(intToDuration(-t.TaskTime.AlertTimesInMinutes[1]))) }</span>
								</p>
							}
						</div>
					</div>
				</li>
			}
		</ul>
	</div>
}

templ reminderDialog() {
	<dialog class="reminder-dialog">
		<form class="new-reminder" method="post" action="/createReminder">
			<div class="titles">
				<div class="form-pair">
					<label for="add-title">Title:</label>
					<input
						type="text"
						name="title"
						minlength="4"
						maxlength="35"
						placeholder="minimun of 4 words"
						required
					/>
				</div>
				<div class="form-pair">
					<label for="add-subtitle">Subtitle:</label>
					<input
						type="text"
						name="subtitle"
						maxlength="50"
						placeholder="optional"
					/>
				</div>
			</div>
			<div class="reminder-time">
				<div class="combine">
					<div class="form-pair">
						<label for="set-reminder">Set your reminder:</label>
						<input
							type="datetime-local"
							name="reminder"
							max={ FormatTimeTOHMTLDatetimeLocal(nextTwoWeeks()) }
						/>
					</div>
					<div class="alert">
						<input
							type="checkbox"
							name="soundNotification"
							value="true"
							checked
						/>
						<label for="sound-notification-reminder">
							<img
								src="assets/svg/bell.svg"
								alt="Notification Icon"
							/>
						</label>
					</div>
				</div>
				<div class="combine">
					<div class="form-pair ">
						<label for="add-notification__first">
							First
							notification
							(Mins):
						</label>
						<input
							type="number"
							name="firstNotification"
							min="0"
							max="10"
							value="10"
						/>
					</div>
					<div class="alert">
						<input
							type="checkbox"
							name="soundFirstNotification"
							value="true"
							checked
						/>
						<label for="sound-notification-first">
							<img
								src="assets/svg/bell.svg"
								alt="Notification Icon"
							/>
						</label>
					</div>
				</div>
				<div class="combine">
					<div class="form-pair">
						<label for="add-notification__second">
							Second
							notification
							(Mins):
						</label>
						<input
							type="number"
							name="secondNotification"
							min="0"
							max="10"
							value="5"
						/>
					</div>
					<div class="alert">
						<input
							type="checkbox"
							name="soundSecondNotification"
							value="true"
							checked
						/>
						<label for="sound-notification-second">
							<img
								src="assets/svg/bell.svg"
								alt="Notification Icon"
							/>
						</label>
					</div>
				</div>
				<div class="out">
					<div class="form-pair">
						<label for="site-search">
							App to be
							launched:
						</label>
						<input
							type="search"
							name="app"
							list="app-list"
							value="no-app"
						/>
						<datalist id="app-list">
							<option value="Pizza"></option>
							<option value="Burger"></option>
							<option value="Sushi"></option>
							<option value="Pasta"></option>
							<option value="Salad"></option>
						</datalist>
					</div>
				</div>
			</div>
			<div class="form-pair">
				<label for="add-note">Include Note:</label>
				<textarea
					name="note"
					rows="3"
					cols="1"
					placeholder="optional"
				></textarea>
			</div>
			<div class="button-container">
				<button type="submit">Create Reminder</button>
				<button class="close-modal" formmethod="dialog" formnovalidate>Close</button>
			</div>
		</form>
		<script>
			function getLocalDateTime() {
				const now = new Date();
				const timeZoneOffset = now.getTimezoneOffset() * 60000;
				const localDateTime = new Date(now.getTime() - timeZoneOffset);
				return localDateTime.toISOString().slice(0, 16);
			}

			const reminderDialog = document.querySelector('.reminder-dialog');
			
			document.querySelector('.reminder-dialog__btn').addEventListener('click', () => {
				const dateTimeInput = document.querySelector('input[type="datetime-local"]');
				dateTimeInput.value = getLocalDateTime();
				dateTimeInput.min = getLocalDateTime();
				reminderDialog.showModal();
			});
		</script>
	</dialog>
}

templ limitDialog(allApp []types.AppIconCategoryAndCmdLine) {
	<dialog class="limit-dialog">
		<form class="" method="post" action="/createLimit">
			<select
				name="app"
				is="ms-dropdown"
				data-enable-auto-filter="false"
				required
			>
				<option
					value=""
					data-description="select app to limit"
				>Apps</option>
				for _, app := range allApp {
					<option value={ app.AppName } data-image={ getImageFilePath(app.AppName, app.Icon) } data-description={ app.Category.String() }>{ app.AppName }</option>
				}
			</select>
			<div class="inline">
				<input
					type="number"
					name="hrs"
					min="0"
					required
					placeholder="limit in Hrs"
				/>
				<input
					type="number"
					name="min"
					min="0"
					required
					placeholder="limit in Minutes"
				/>
			</div>
			<div class="inline">
				<div>
					<input
						type="checkbox"
						name="recurring"
						value="true"
						checked
					/>
					<label
						for="sound-notification-first"
					>Everyday</label>
				</div>
				<div>
					<input
						type="checkbox"
						name="exitApp"
						value="true"
						checked
					/>
					<label for="sound-notification-first">
						Exist
						app
					</label>
				</div>
			</div>
			<div class="button-container">
				<button type="submit">Create Limit</button>
				<button
					class="close-modal"
					formmethod="dialog"
					formnovalidate
				>Close</button>
			</div>
		</form>
		<script type="text/javascript">
				const limitDialog = document.querySelector('.limit-dialog');
				document.querySelector('.limit-dialog__btn').addEventListener('click', () => {
					limitDialog.showModal();
				});
		</script>
	</dialog>
}

templ limitList(tasks []types.Task) {
	for _, task := range  tasks {
		<div class="limit-apps">
			<div class="appInfo">
				<img src={ getImageFilePath(task.AppName, task.Icon) } alt={ task.AppName }/>
				<p>{ task.AppName }</p>
			</div>
			<div class="limitInfo">
				<p class="shade">{ helperFuncs.UsageTimeInHrsMin(task.TaskTime.Limit) }</p>
				<p hidden class="uuid">{ task.UUID.String() }</p>
				<button>Edit</button>
			</div>
		</div>
	}
}
