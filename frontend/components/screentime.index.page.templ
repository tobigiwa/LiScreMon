package frontend

import "html/template"
import "pkg/types"
import "reflect"
import "strings"
import helperFuncs "pkg/helper"

templ IndexPage() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="stylesheet" href="/assets/styles/index.css"/>
			<link rel="stylesheet" href="/assets/styles/screentime.css"/>
			<script src="assets/javascript/script.out.js"></script>
			<script src="assets/libraries/htmx.min.js"></script>
			<script src="assets/libraries/echarts.min.js"></script>
			<title>ScreenTimePage</title>
		</head>
		<body>
			<div class="page">
				@menu()
				@screentimeTimePage()
			</div>
		</body>
	</html>
}

templ screentimeTimePage() {
	<div class="main">
		@Header()
		@chartWrapper("", types.NoAppIconCategoryAndCmdLine)
		@chartControls()
		@chartHighlight(nil, 0, nil, "")
	</div>
}

templ chartWrapper(chart template.HTML, info types.AppIconCategoryAndCmdLine) {
	<div class="chart-wrapper">
		<div id="echart" hx-swap-oob="true">
			@templ.Raw(chart)
			if !reflect.ValueOf(info).IsZero() {
				if info.IsIconSet {
					<img src={ getImageFilePath(info.AppName, info.Icon) } alt={ info.AppName } class="appIcon"/>
				} else {
					<img src="/assets/image/noAppImage.jpg" alt="noImage" class="appIcon"/>
				}
			}
		</div>
	</div>
}

templ chartControls() {
	<div class="chart-controls">
		<div class="left-controls">
			<div class="select-month">
				<select name="month" class="month" hx-get="/weekStat?week=month" hx-vals="js{month: this.value}" hx-swap="none" hx-select-oob="#echart:innerHTML,#highlight:outerHTML">
					<option value="" id="placeholder" disabled selected>Last 3 Month</option>
					for _, v := range monthDropDownSelectArray(3) {
						<option class="option" value={ v }>{ v }</option>
					}
				</select>
			</div>
			<button class="left-controls__btn img backward-arrow" hx-get="/weekStat?week=backward" hx-swap="none" hx-select-oob="#echart:innerHTML,#highlight:outerHTML">
				<img class="chart__controls--img" src="assets/svg/angle-left-svgrepo-com.svg" alt=""/>
			</button>
			<button class="left-controls__btn text" hx-get="/weekStat?week=lastweek" hx-swap="none" hx-select-oob="#echart:innerHTML,#highlight:outerHTML">Last Week</button>
			<button class="left-controls__btn text" id="thisWeekButton" hx-get="/weekStat?week=thisweek" hx-swap="none" hx-select-oob="#echart:innerHTML,#highlight:outerHTML">This Week</button>
			<button class="left-controls__btn img forward-arrow" hx-get="/weekStat?week=forward" hx-swap="none" hx-select-oob="#echart:innerHTML,#highlight:outerHTML">
				<img class="chart__controls--img" src="assets/svg/angle-right-svgrepo-com.svg" alt=""/>
			</button>
		</div>
		<div class="spacing"></div>
		<script>
			document.addEventListener( 'DOMContentLoaded', function ()
			{
				const thisWeekButton = document.querySelector( '#thisWeekButton' );
				if ( thisWeekButton ) {
					thisWeekButton.click();
				}	
			});
		</script>
	</div>
}

templ chartHighlight(appDetails []types.ApplicationDetail, totalWeekUsage float64, allCategory []types.Category, anyDay string) {
	<div class="chart-highlight" id="highlight" hx-swap-obb="true">
		<ul>
			for _, app := range appDetails {
				<li class="card" tabindex="10" hx-get={ string(templ.URL("/appStat?range=week&appName=" + app.AppInfo.AppName + "&start=" + anyDay)) } hx-swap="none" hx-select-oob="#echart:outerHTML">
					if app.AppInfo.IsIconSet {
						<img src={ getImageFilePath(app.AppInfo.AppName, app.AppInfo.Icon) } alt={ app.AppInfo.AppName } class="app-icon"/>
					} else {
						<img src="/assets/image/noAppImage.jpg" alt="noImage" class="app-icon"/>
					}
					<div class="info">
						<div class="appName" style="font-size:large;font-weight:bold;">{ app.AppInfo.AppName }</div>
						<div class="desktopCategories" hidden>{ strings.Join(app.AppInfo.DesktopCategories, "  ") }</div>
						if app.AppInfo.IsCategorySet && app.AppInfo.Category.String() != "" {
							<button disabled class="category" style="color:white;">{ app.AppInfo.Category.String() }</button>
						} else {
							if helperFuncs.IsInCurrentWeekDate(types.Date(anyDay)) {
								<button class="category" onclick="openCategoryDialog(event)">Selct application catergory</button>
								@setCategoryDialog(allCategory)
							}
						}
					</div>
					if percentageUse := helperFuncs.PercentagesString(app.Usage, totalWeekUsage); percentageUse == "NaN" {
						<div class="appStat" style="font-style:italic;">0% of weeks usage</div>
					} else {
						<div class="appStat" style="font-style:italic;">{ percentageUse } of weeks usage: { helperFuncs.UsageTimeInHrsMin(app.Usage) }</div>
					}
				</li>
			}
		</ul>
		<script>
			function openCategoryDialog(event) {
				const trigger = event.target.parentElement.parentElement; // the li
				const triggerIconElement = trigger.querySelector('img');
				const icon = triggerIconElement.getAttribute('src');
				const appName = trigger.querySelector('.appName').innerHTML;
				const desktopCategories = trigger.querySelector('.desktopCategories').innerHTML;

				event.stopPropagation();

				// build the modal dialog
				const dialog = document.getElementById('categoryDialog');
				const imgElement = dialog.querySelector('form .head img');
				const headerClassParagraph = dialog.querySelector('form .head p');
				const dialogLegend = dialog.querySelector('form legend');
				const dialogHiddenInput = dialog.querySelector('form fieldset+input');
				const dialogDesktopCategoriesClass = dialog.querySelector('form div+div');
				imgElement.setAttribute('src', icon);
				imgElement.setAttribute('alt', appName);
				dialogHiddenInput.setAttribute('value', appName);
				headerClassParagraph.innerHTML = `<b>${appName}</b>`
				dialogLegend.innerHTML = `Select a category for ${appName}:`
				
				if (desktopCategories === '' || desktopCategories.trim() === '') {
					dialogDesktopCategoriesClass.style.display = 'none';
				} else {
					dialogDesktopCategoriesClass.innerHTML = `Application file category(s):\n${desktopCategories}`;
				}

				// show the modal dialog
				dialog.showModal();
			};
		</script>
	</div>
}

templ setCategoryDialog(allCategory []types.Category) {
	<dialog class="select-category" id="categoryDialog">
		<form method="post" action="/setCategory">
			<div class="head">
				<p></p>
				<img src="" alt=""/>
			</div>
			<div class="desktop-categories">"</div>
			<fieldset>
				<legend></legend>
				for _, catergory := range allCategory {
					<div>
						<input
							type="radio"
							name="category"
							value={ catergory.String() }
						/>
						<label for={ catergory.String() }>{ catergory.String() }</label>
					</div>
				}
			</fieldset>
			<input type="hidden" name="appName" value=""/>
			<p class="space">
				OR
			</p>
			<p class="info">Create a new category in the Settings and update it here.</p>
			<div class="button-container">
				<button type="submit">Set category</button>
				<button class=".close-modal" formmethod="dialog">Close</button>
			</div>
		</form>
		<script>
			const setCategoryDialog = document.getElementById('categoryDialog');
			setCategoryDialog.addEventListener('click', (e) => e.stopPropagation());
		</script>
	</dialog>
}
