package frontend

import "time"
import "html/template"
import "fmt"
import "pkg/types"

templ ScreenTimePage() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="stylesheet" href="/assets/styles/screentime.css"/>
			// <script src="assets/js/out.js"></script>
			<script src="assets/htmx.min.js"></script>
			<script src="assets/echarts.min.js"></script>
			<title>ScreenTimePage</title>
		</head>
		<body>
			<div class="page">
				@Menu()
				@main()
			</div>
		</body>
	</html>
}

templ main() {
	<div class="main">
		@Header()
		@chartWrapper("")
		@chartControls()
		@chartHighlight(nil)
	</div>
}

templ chartWrapper(chart template.HTML) {
	<div class="chart-wrapper">
		<div id="echart" hx-swap-oob="true">
			@templ.Raw(chart)
		</div>
	</div>
}

templ chartHighlight(appDetails []types.ApplicationDetail) {
	<div class="chart-highlight" hx-swap-obb="true">
		<ul id="highlight">
			for i:=0; i < len(appDetails); i++ {
				<li>
					<div class="card">
						<img src="" alt="" class="app-icon"/>
						<div class="info">
							<div class="appName">{ appDetails[i].AppInfo.AppName }</div>
							if appDetails[i].AppInfo.IsCategorySet {
								<button class="category">Category: { appDetails[i].AppInfo.Category }</button>
							} else {
								<button class="category">Selct application catergory</button>
							}
						</div>
						<div class="appStat">Weeks Usage: { fmt.Sprintf("%v", appDetails[i].Usage) }Hrs</div>
					</div>
				</li>
			}
		</ul>
	</div>
}

templ WeekStatChartAndHighlight(chart template.HTML, appDetails []types.ApplicationDetail) {
	@chartWrapper(chart)
	@chartHighlight(appDetails)
}

templ chartControls() {
	<div class="chart-controls">
		<div class="left-controls">
			<div class="select-month">
				<select name="month" class="month" hx-get="/weekStat?week=month" hx-vals="js{month: this.value}" hx-swap="none" hx-indicator="#echart">
					<option value="" id="placeholder" disabled selected>Last 3 Month</option>
					for _, v := range monthDropDownSelectArray() {
						<option class="option" value={ v }>{ v }</option>
					}
				</select>
			</div>
			<button class="left-controls__btn img backward-arrow" hx-swap="none" hx-indicator="#echart">
				<img
					class="chart__controls--img"
					src="assets/svg/angle-left-svgrepo-com.svg"
					alt=""
				/>
			</button>
			<button class="left-controls__btn text" hx-get="/weekStat?week=lastweek" hx-swap="none" hx-indicator="#echart">Last Week</button>
			<button class="left-controls__btn text" id="thisWeekButton" hx-get="/weekStat?week=thisweek" hx-select-oob="#echart:innerHTML,#highlight:innerHTML">This Week</button>
			<button class="left-controls__btn img forward-arrow" hx-swap="none" hx-indicator="#echart">
				<img
					class="chart__controls--img"
					src="assets/svg/angle-right-svgrepo-com.svg"
					alt=""
				/>
			</button>
		</div>
		<div class="spacing"></div>
		<div class="right-controls">
			<button class="right-controls__btn text" href="#">Asce.</button>
			<button class="right-controls__btn text" href="#">Desc.</button>
		</div>
		<script>
		document.addEventListener( 'DOMContentLoaded', function ()
		{
			window.onload = function ()
			{
				var thisWeekButton = document.querySelector( '#thisWeekButton' );

				if ( thisWeekButton ) {
					thisWeekButton.click();
				}
			};

		} );
		</script>
	</div>
}

func monthDropDownSelectArray() [3]string {
	today := time.Now()
	past4Month := [3]string{}
	for i := 0; i < 3; i++ {
		m := today.AddDate(0, -(i + 1), 0)
		past4Month[i] = m.Month().String()
	}
	return past4Month
}
