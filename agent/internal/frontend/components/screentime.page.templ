package frontend

import (
	"fmt"
	"html/template"
	"reflect"
	"strings"
	utils "utils"
)

templ IndexPage() {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="stylesheet" href="/assets/styles/output.css"/>
			<script src="assets/javascript/script.out.js"></script>
			<script src="assets/libraries/htmx.min.js"></script>
			<script src="assets/libraries/hyperscript.min.js"></script>
			<script src="assets/libraries/echarts.min.js"></script>
			<title>ScreenTimePage</title>
		</head>
		<body class="m-0 p-0 h-full font-serif overflow-hidden">
			<div class="flex w-full">
				@sideBarMenu()
				@screentimeTimePage()
			</div>
		</body>
	</html>
}

templ screentimeTimePage() {
	<div class="w-full bg-zinc-800">
		@header()
		@chartWrapper("", utils.NoAppIconCategoryAndCmdLine)
		@chartControls()
		@chartHighlight(nil, 0, "")
	</div>
}

templ chartWrapper(chart template.HTML, info utils.AppIconCategoryAndCmdLine) {
	<div class="relative">
		<div id="echart" class="bg-white rounded w-99%" hx-swap-oob="true">
			@templ.Raw(chart)
			if !reflect.ValueOf(info).IsZero() {
				if info.IsIconSet {
					<img src={ getImageFilePath(info.AppName, info.Icon) } alt={ info.AppName } class="absolute w-5 h-5 top-1.5 left-1.5"/>
				} else {
					<img src="/assets/image/noAppImage.jpg" alt="noImage" class="absolute w-5 h-5 top-1.5 left-1.5"/>
				}
			}
		</div>
	</div>
}

templ chartControls() {
	<div class="bg-black w-full">
		<div class=" bg-zinc-800 h-12 inline-flex justify-start gap-4 text-lg border-dashed rounded-lg">
			<select
				name="month"
				hx-get="/weekStat?week=month"
				hx-include="[month='this.value']"
				hx-vals="js:{nonce: Math.random()}"
				hx-swap="none"
				hx-select-oob="#echart:innerHTML,#highlight:outerHTML"
				class="h-full bg-zinc-800 text-white rounded-none outline-none py-0 px-4 shadow-zinc-800"
			>
				<option value="" id="placeholder" disabled selected>Last 3 Month</option>
				for _, v := range monthDropDownSelectArray(3) {
					<option class="option" value={ v }>{ v }</option>
				}
			</select>
			<button class="rounded-l bg-zinc-800 text-white font-bold hover:rounded-l hover:bg-zinc-400 " hx-get="/weekStat?week=backward" hx-vals="js:{nonce: Math.random()}" hx-swap="none" hx-select-oob="#echart:innerHTML,#highlight:outerHTML">
				<img class="w-12" src="assets/svg/angle-left-svgrepo-com.svg" alt=""/>
			</button>
			<button class="rounded-l bg-zinc-800 text-white font-bold hover:rounded-l hover:bg-zinc-400 hover:text-black max550:text-sm" hx-get="/weekStat?week=lastweek" hx-vals="js:{nonce: Math.random()}" hx-swap="none" hx-select-oob="#echart:innerHTML,#highlight:outerHTML">Last Week</button>
			<button class="rounded-l bg-zinc-800 text-white font-bold hover:rounded-l hover:bg-zinc-400 hover:text-black max550:text-sm" hx-get="/weekStat?week=thisweek" hx-vals="js:{nonce: Math.random()}" hx-swap="none" hx-select-oob="#echart:innerHTML,#highlight:outerHTML" _="on load trigger click on me">This Week</button>
			<button class="rounded-l bg-zinc-800 text-white font-bold hover:rounded-l  hover:bg-zinc-400" hx-get="/weekStat?week=forward" hx-vals="js:{nonce: Math.random()}" hx-swap="none" hx-select-oob="#echart:innerHTML,#highlight:outerHTML">
				<img class="w-12" src="assets/svg/angle-right-svgrepo-com.svg" alt=""/>
			</button>
		</div>
	</div>
}

templ chartHighlight(appDetails []utils.ApplicationDetail, totalWeekUsage float64, anyDay string) {
	<div class="bg-zinc-800 rounded-sm overflow-y-auto min-h-chart-highlight max-h-chart-highlight" id="highlight" hx-swap-obb="true">
		<ul class="p-0 m-0 w-99% list-none">
			for _, app := range appDetails {
				<li
					tabindex="10"
					hx-get={ string(templ.URL("/appStat?range=week&appName=" + app.AppInfo.AppName + "&start=" + anyDay)) }
					hx-vals="js:{nonce: Math.random()}"
					hx-swap="none"
					class="flex justify-start items-center bg-zinc-800 outline-none text-white rounded-xl pr-1 mr-1 focus:text-black focus:bg-teal-700 focus:shadow-lg focus:scale-90 transition"
				>
					if app.AppInfo.IsIconSet {
						<img class="max550:hidden h-12 rounded-md" src={ getImageFilePath(app.AppInfo.AppName, app.AppInfo.Icon) } alt={ app.AppInfo.AppName }/>
					} else {
						<img class="max550:hidden h-12 rounded-md" src="/assets/image/noAppImage.jpg" alt="noImage"/>
					}
					<div class="flex flex-col ml-4">
						<div class="font-bold text-lg appName">{ app.AppInfo.AppName }</div>
						<div class="desktopCategories" hidden>{ strings.Join(app.AppInfo.DesktopCategories, "  ") }</div>
						if app.AppInfo.IsCategorySet && app.AppInfo.Category.String() != "" {
							<button disabled id={ app.AppInfo.AppName } class="min-w-full rounded-sm bg-zinc-800 text-white text-left" hx-swap-obb="true">{ app.AppInfo.Category.String() }</button>
						} else if utils.IsInCurrentWeekDate(utils.Date(anyDay)) {
							<button class="bg-cyan-800" hx-get={ "/getCategory?name=" + app.AppInfo.AppName } hx-target="body" hx-swap="beforeend" onclick="event.stopPropagation()">Select app catergory</button>
						}
					</div>
					if percentageUse := utils.PercentagesString(app.Usage, totalWeekUsage); percentageUse == "NaN" {
						<div class="appStat ml-auto italic">0% of week usage</div>
					} else {
						<div class="appStat ml-auto italic">{ percentageUse } of week usage: { utils.UsageTimeInHrsMin(app.Usage) }</div>
					}
				</li>
			}
		</ul>
	</div>
}

templ CategoryModal(allCategory []utils.Category, appInfo utils.AppIconCategoryAndCmdLine) {
	<div
		class="w-full h-full fixed top-0 bottom-0 left-0 right-0  backdrop-blur-sm z-10 flex flex-col items-center justify-center"
		_="on closeModal remove me"
	>
		<form
			id="setCategory"
			class="w-2/4 bg-slate-300 rounded-lg p-4"
			hx-post={ "/setCategory?appName=" + appInfo.AppName }
			hx-trigger="submit"
			hx-swap="none"
			hx-select-oob={ fmt.Sprintf("#%s:innerHTML", appInfo.AppName) }
			_="on htmx:afterSwap trigger closeModal"
		>
			<div class="inline-flex w-full justify-end mt-3 gap-1">
				<p>{ appInfo.AppName }:</p>
				<img class="h-6 w-6" src={ getImageFilePath(appInfo.AppName, appInfo.Icon) } alt=""/>
			</div>
			if len(appInfo.DesktopCategories) > 0 {
				<p class="">The application custom category says:</p>
				<p class="bg-black text-white max-w-full rounded mt-2">Application file custom category(s): { strings.Join(appInfo.DesktopCategories, "  ") }</p>
			}
			<fieldset class="mt-3 rounded p-2 border-2 border-solid border-black mb-3">
				<legend class="bg-black text-white py-1 px-2 rounded">Choose application category</legend>
				for _, category := range allCategory {
					<input
						type="radio"
						name="category"
						value={ category.String() }
						class="m-3"
					/>
					<label for={ category.String() }>{ category.String() } </label>
					<br/>
				}
			</fieldset>
			<p class="text-center my-4">OR</p>
			<p class="text-center">Create a new category in the Settings and update it here.</p>
			<div class="inline-flex w-full justify-end gap-4 mt-2">
				<button class="bg-blue-600 p-2 rounded-lg" type="submit" form="setCategory">Set category</button>
				<button class="bg-red-600 p-2 rounded-lg" _="on click trigger closeModal">Close</button>
			</div>
		</form>
	</div>
}
