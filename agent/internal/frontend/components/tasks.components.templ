package frontend

import (
	"time"
	"utils"
)

templ ReminderTasks(tasks []utils.Task) {
	if len(tasks) == 0 {
		<p id="taskHolder" hx-swap-oob="true" class="flex justify-center items-center text-white min-h-task-page">No Task</p>
	} else {
		<ul id="taskHolder" hx-swap-oob="true" class="">
			for _, t := range tasks {
				<li>
					<div class="w-full bg-slate-700 inline-flex justify-between mb-1">
						<div class="px-2 w-1/2">
							<p class="font-extrabold text-lg p-2 m-1"><span class="text-sm"><i>title:</i></span> <span class="font-extrabold text-lg p-2">{ t.UI.Title }</span></p>
							<p class="font-bold"><span class="text-sm"><i>subtitle:</i></span> <span class="font-extrabold text-lg p-2">{ t.UI.Subtitle }</span></p>
							<details>
								<summary><span class="text-sm"><i>See attached note</i></span></summary>
								<p>{ t.UI.Notes }</p>
							</details>
							if t.Job == utils.ReminderWithAppLaunch {
								<div class="text-lg flex items-center gap-1">would launch: <img src={ getImageFilePath(t.AppName, t.Icon) } alt="" class="h-4 w-4"/> { t.AppName }</div>
							}
						</div>
						<div class="edit-and-alerts inline-flex w-full justify-end gap-4 align-baseline">
							<div>
								<img title="delete reminder" src="/assets/svg/delete.svg" alt="delete" hx-post={ "/removeTask/" + t.UUID.String() } hx-swap="none" hx-select-oob="#taskHolder:outerHTML" class="h-6 w-8 cursor-pointer hover:scale-125"/>
								<img title="edit reminder" src="/assets/svg/edit.svg" alt="delete" class="h-6 w-8 cursor-pointer hover:scale-125"/>
							</div>
							<div>
								<p class="font-bold text-lg"><span class="font-bold text-lg"><i>Starts at:</i></span> <span class="font-bold">{ formatTimeToHumanReadable(t.Reminder.StartTime) }</span></p>
								if time.Now().Before(t.Reminder.StartTime.Add(intToDuration(-t.Reminder.AlertTimesInMinutes[0]))) {
									<p>
										<span class="font-bold text-lg"><i>reminder at:</i></span>
										<span class="font-bold">{ formatTimeToHumanReadable(t.Reminder.StartTime.Add(intToDuration(-t.Reminder.AlertTimesInMinutes[0]))) }</span>
									</p>
								}
								if time.Now().Before(t.Reminder.StartTime.Add(intToDuration(-t.Reminder.AlertTimesInMinutes[1]))) {
									<p>
										<span class="font-bold text-lg"><i>reminder at:</i></span>
										<span class="font-bold">{ formatTimeToHumanReadable(t.Reminder.StartTime.Add(intToDuration(-t.Reminder.AlertTimesInMinutes[1]))) }</span>
									</p>
								}
							</div>
						</div>
					</div>
				</li>
			}
		</ul>
	}
}

templ AppLimitTasks(tasks []utils.Task) {
	if len(tasks) == 0 {
		<p id="taskHolder" hx-swap-oob="true" class="flex justify-center items-center text-white min-h-task-page">No Task</p>
	} else {
		<ul id="taskHolder" hx-swap-oob="true" class="">
			for _, t := range  tasks {
				<li>
					<div class="inline-flex w-full px-4 justify-between items-center bg-zinc-800 text-white">
						<div class="inline-flex justify-start items-center g-1 w-1/2 px-1 leading-10">
							<img src={ getImageFilePath(t.AppName, t.Icon) } alt={ t.AppName } class="h-8 w-8 align-middle hover:scale-95"/>
							<p>{ t.AppName }</p>
						</div>
						<div class="inline-flex justify-end items-center w-1/2 gap-8">
							<p class="bg-teal-500 font-bold italic h-8 w-40 text-center pt-2 cursor-default">{ utils.UsageTimeInHrsMin(t.TaskTime.AppLimit.Limit) }</p>
							<div class="flex gap-4">
								<img src="/assets/svg/delete.svg" alt="delete" hx-post={ "/removeTask/" + t.UUID.String() + "?taskType=AppLimit" } hx-swap="none" hx-select-oob="#taskHolder:outerHTML" class="hover:scale-95 h-6 w-6 cursor-pointer" title="delete app limit"/>
								<img title="edit app limit" src="/assets/svg/edit-white.svg" alt="edit" class="hover:scale-95 h-6 w-6 cursor-pointer"/>
							</div>
						</div>
					</div>
				</li>
			}
		</ul>
	}
}
